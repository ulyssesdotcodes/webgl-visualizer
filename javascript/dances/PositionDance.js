// Generated by CoffeeScript 1.8.0
(function () {
    window.PositionDance = (function () {
        PositionDance.params = [
            {
                name: 'smoothingFactor',
                "default": 0.2
            },
            {
                name: 'direction',
                "default": [0, 1, 0]
            }
        ];

        PositionDance.name = "PositionDance";

        function PositionDance(options) {
            var direction, _ref;
            this.options = options;
            if (this.options != null) {
                _ref = this.options, this.smoothingFactor = _ref.smoothingFactor, direction = _ref.direction;
            }
            if (this.smoothingFactor == null) {
                this.smoothingFactor = 0.2;
            }
            if (direction == null) {
                direction = [0, 1, 0];
            }
            this.direction = new THREE.Vector3(direction[0], direction[1], direction[2]);
            this.directionCopy = new THREE.Vector3();
            this.positionChange = 0;
        }

        PositionDance.prototype.update = function (audioWindow, dancer) {
            var basePosition, newPosition, smoothingFactor;
            basePosition = new THREE.Vector3();
            this.directionCopy.copy(this.direction);
            basePosition.subVectors(dancer.body.position, this.directionCopy.multiplyScalar(this.positionChange));
            smoothingFactor = audioWindow.averageDb < this.positionChange ? this.smoothingFactor : Math.max(1, this.smoothingFactor * 4);
            this.positionChange = audioWindow.averageDb * smoothingFactor + (1 - smoothingFactor) * this.positionChange;
            this.directionCopy.copy(this.direction);
            newPosition = new THREE.Vector3();
            newPosition.addVectors(basePosition, this.directionCopy.multiplyScalar(this.positionChange));
            return dancer.body.position.set(newPosition.x, newPosition.y, newPosition.z);
        };

        PositionDance.prototype.reset = function (dancer) {
            var basePosition;
            this.directionCopy.copy(this.direction);
            basePosition = new THREE.Vector3();
            basePosition.subVectors(dancer.body.position, this.directionCopy.multiplyScalar(this.positionChange));
            return dancer.body.position.set(basePosition.x, basePosition.y, basePosition.z);
        };

        return PositionDance;

    })();

}).call(this);
