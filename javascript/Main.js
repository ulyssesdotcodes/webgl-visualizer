// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Main = (function() {
    function Main() {
      this.onWindowResize = __bind(this.onWindowResize, this);
      var controlChange;
      this.scene = new THREE.Scene();
      this.renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: false
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.autoClear = false;
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
      this.controls.damping = 0.2;
      controlChange = (function(_this) {
        return function() {
          return _this.render();
        };
      })(this);
      this.controls.addEventListener('change', controlChange);
      this.camera.position.z = -4;
      this.camera.position.y = 3;
      this.controls.target = new THREE.Vector3(0, 0, 0);
      window.addEventListener('resize', this.onWindowResize, false);
      document.body.appendChild(this.renderer.domElement);
      this.visualizer = new Visualizer(this.scene, this.camera);
      window.addEventListener('keydown', this.visualizer.onKeyDown.bind(this.visualizer), false);
    }

    Main.prototype.animate = function() {
      this.render();
      return this.controls.update();
    };

    Main.prototype.render = function() {
      this.visualizer.render();
      this.scene.updateMatrixWorld();
      this.camera.updateProjectionMatrix();
      this.renderer.clear();
      this.renderer.render(this.scene, this.camera);
    };

    Main.prototype.onWindowResize = function() {
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      return this.renderer.setSize(window.innerWidth, window.innerHeight);
    };

    return Main;

  })();

  window.animate = function() {
    requestAnimationFrame(window.animate);
    return window.app.animate();
  };

  $(function() {
    window.app = new Main();
    window.animate();
    return dat.GUI.prototype.removeFolder = function(name) {
      var folder;
      folder = this.__folders[name];
      if (!folder) {
        return;
      }
      folder.close();
      this.__ul.removeChild(folder.domElement.parentNode);
      delete this.__folders[name];
      return this.onResize();
    };
  });

}).call(this);
