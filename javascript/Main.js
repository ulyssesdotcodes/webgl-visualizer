// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Main = (function() {
    function Main(isVisualizer) {
      this.onWindowResize = __bind(this.onWindowResize, this);
      var controlChange;
      this.scene = new THREE.Scene();
      this.renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: false
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.autoClear = false;
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
      this.controls.damping = 0.2;
      controlChange = (function(_this) {
        return function() {
          return _this.render();
        };
      })(this);
      this.controls.addEventListener('change', controlChange);
      this.camera.position.z = -4;
      this.camera.position.y = 3;
      this.controls.target = new THREE.Vector3(0, 0, 0);
      window.addEventListener('resize', this.onWindowResize, false);
      document.body.appendChild(this.renderer.domElement);
      this.viewer = new VisualizerViewer(this.scene, this.camera);
      if (isVisualizer) {
        this.visualizer = new Visualizer(this.viewer);
        window.addEventListener('keydown', this.visualizer.onKeyDown.bind(this.visualizer), false);
      } else {
        this.domain = window.location.protocol + '//' + window.location.host;
        window.addEventListener('message', (function(_this) {
          return function(event) {
            var sentObj;
            if (event.origin !== _this.domain) {
              return;
            }
            sentObj = event.data;
            if (sentObj.type === 'render') {
              _this.viewer.render(sentObj.data);
            }
            if (sentObj.type === 'choreography') {
              return _this.viewer.receiveChoreography(sentObj.data);
            }
          };
        })(this));
      }
    }

    Main.prototype.animate = function() {
      this.render();
      return this.controls.update();
    };

    Main.prototype.render = function() {
      var _ref;
      if ((_ref = this.visualizer) != null) {
        _ref.render();
      }
      this.scene.updateMatrixWorld();
      this.camera.updateProjectionMatrix();
      this.renderer.clear();
      this.renderer.render(this.scene, this.camera);
    };

    Main.prototype.onWindowResize = function() {
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      return this.renderer.setSize(window.innerWidth, window.innerHeight);
    };

    return Main;

  })();

  window.animate = function() {
    requestAnimationFrame(window.animate);
    return window.app.animate();
  };

  $(function() {
    return dat.GUI.prototype.removeFolder = function(name) {
      var folder;
      folder = this.__folders[name];
      if (!folder) {
        return;
      }
      folder.close();
      this.__ul.removeChild(folder.domElement.parentNode);
      delete this.__folders[name];
      return this.onResize();
    };
  });

}).call(this);

//# sourceMappingURL=Main.js.map
