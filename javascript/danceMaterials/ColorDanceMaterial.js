// Generated by CoffeeScript 1.8.0
(function() {
  window.ColorDanceMaterial = (function() {
    ColorDanceMaterial.params = [
      {
        name: 'smoothingFactor',
        "default": 0.5
      }, {
        name: 'minL',
        "default": 0.1
      }, {
        name: 'minS',
        "default": 0.3
      }
    ];

    function ColorDanceMaterial(options) {
      if (options != null) {
        this.smoothingFactor = options.smoothingFactor, this.minL = options.minL, this.minS = options.minS;
      }
      if (this.smoothingFactor == null) {
        this.smoothingFactor = 0.5;
      }
      if (this.minL == null) {
        this.minL = 0.1;
      }
      if (this.minS == null) {
        this.minS = 0.3;
      }
      this.color = new THREE.Color(1.0, 0, 0);
      this.material = new THREE.MeshLambertMaterial({
        color: 0x00000,
        wireframe: true
      });
      this.appliedColor = this.color.clone();
    }

    ColorDanceMaterial.prototype.update = function(audioWindow, dancer) {
      var freq, hsl, i, l, maxImportantIndex, maxIndex, maxValue, newColorH, newColorL, newColorS, oldColorHSL, s, value, _i, _ref;
      maxValue = 0;
      maxIndex = -1;
      maxImportantIndex = 1;
      for (i = _i = 1, _ref = audioWindow.bufferSize; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        freq = audioWindow.frequencyBuffer[i];
        value = freq * i;
        if (value > maxValue) {
          maxValue = value;
          maxIndex = i;
        }
      }
      oldColorHSL = this.appliedColor.getHSL();
      newColorS = maxIndex / audioWindow.bufferSize;
      newColorS = this.smoothingFactor * newColorS + (1 - this.smoothingFactor) * oldColorHSL.s;
      newColorL = audioWindow.averageDb;
      newColorL = this.smoothingFactor * newColorL + (1 - this.smoothingFactor) * oldColorHSL.l;
      l = this.minL + newColorL * (1.0 - this.minL);
      s = this.minS + newColorS * (1.0 - this.minS);
      newColorH = (360 * (audioWindow.time / 10000) % 360) / 360;
      hsl = this.color.getHSL();
      this.appliedColor.setHSL(newColorH, s, l);
      if (dancer != null) {
        if (dancer.body.material.emissive != null) {
          dancer.body.material.emissive.copy(this.appliedColor);
        }
        return dancer.body.material.color.copy(this.appliedColor);
      }
    };

    return ColorDanceMaterial;

  })();

}).call(this);
