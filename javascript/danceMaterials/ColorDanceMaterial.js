// Generated by CoffeeScript 1.8.0
(function() {
  window.ColorDanceMaterial = (function() {
    function ColorDanceMaterial(options) {
      this.smoothingFactor = options.smoothingFactor, this.color = options.color;
      if (this.color == null) {
        this.color = new THREE.Color(1.0, 0, 0);
      }
      this.material = new THREE.MeshLambertMaterial({
        color: 0x00000,
        wireframe: true
      });
      this.appliedColor = this.color.clone();
    }

    ColorDanceMaterial.prototype.update = function(audioWindow, dancer) {
      var freq, hsl, i, maxImportantIndex, maxIndex, maxValue, newColorH, newColorL, newColorS, oldColorHSL, value, _i, _ref;
      maxValue = 0;
      maxIndex = -1;
      maxImportantIndex = 1;
      for (i = _i = 1, _ref = audioWindow.bufferSize; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        freq = audioWindow.frequencyBuffer[i];
        value = freq * i;
        if (value > maxValue) {
          maxValue = value;
          maxIndex = i;
        }
      }
      oldColorHSL = this.appliedColor.getHSL();
      newColorS = maxIndex / audioWindow.bufferSize;
      newColorS = this.smoothingFactor * newColorS + (1 - this.smoothingFactor) * oldColorHSL.s;
      newColorL = audioWindow.averageDb;
      newColorL = this.smoothingFactor * newColorL + (1 - this.smoothingFactor) * oldColorHSL.l;
      newColorH = (360 * (oldColorHSL.h + audioWindow.time) % 360) / 360;
      hsl = this.color.getHSL();
      this.appliedColor.setHSL(newColorH, newColorS, newColorL);
      if (dancer != null) {
        if (dancer.body.material.emissive != null) {
          dancer.body.material.emissive.copy(this.appliedColor);
        }
        return dancer.body.material.color.copy(this.appliedColor);
      }
    };

    return ColorDanceMaterial;

  })();

}).call(this);
