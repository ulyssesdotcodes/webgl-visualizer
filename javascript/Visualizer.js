// Generated by CoffeeScript 1.8.0
(function() {
  require('./Player.coffee');

  require('./ChoreographyRoutine.coffee');

  require('./dancers/CubeDancer.coffee');

  require('./dancers/SphereDancer.coffee');

  require('./dancers/PointCloudDancer.coffee');

  require('./dances/ScaleDance.coffee');

  require('./dances/PositionDance.coffee');

  require('./dances/RotateDance.coffee');

  require('./danceMaterials/ColorDanceMaterial.coffee');

  require('./danceMaterials/SimpleFrequencyShader.coffee');

  window.Visualizer = (function() {
    Visualizer.prototype.keys = {
      PAUSE: 32,
      NEXT: 78
    };

    function Visualizer(viewer, _interface) {
      this.viewer = viewer;
      this["interface"] = _interface;
      this.player = new Player();
      this.player.createLiveInput();
      this.choreographyRoutine = new ChoreographyRoutine(this);
      this["interface"].setupPopup();
      this["interface"].setup(this.player, this.choreographyRoutine, this.viewer);
      this.choreographyRoutine.playNext();
    }

    Visualizer.prototype.receiveChoreography = function(move) {
      this.viewer.receiveChoreography(move);
      if (this.popup != null) {
        return this.popup.postMessage(this.wrapMessage('choreography', move), this.domain);
      }
    };

    Visualizer.prototype.render = function() {
      if (!this.player.playing) {
        return;
      }
      this.player.update();
      this.viewer.render(this.player.audioWindow);
      if (this.popup != null) {
        return this.popup.postMessage(this.wrapMessage('render', this.player.audioWindow), this.domain);
      }
    };

    Visualizer.prototype.wrapMessage = function(type, data) {
      return {
        type: type,
        data: data
      };
    };

    Visualizer.prototype.onKeyDown = function(event) {
      switch (event.keyCode) {
        case this.keys.PAUSE:
          return this.player.pause();
        case this.keys.NEXT:
          return this.choreographyRoutine.playNext();
      }
    };

    Visualizer.dancerTypes = {
      CubeDancer: CubeDancer,
      SphereDancer: SphereDancer,
      PointCloudDancer: PointCloudDancer
    };

    Visualizer.danceTypes = {
      ScaleDance: ScaleDance,
      PositionDance: PositionDance,
      RotateDance: RotateDance
    };

    Visualizer.danceMaterialTypes = {
      ColorDanceMaterial: ColorDanceMaterial,
      SimpleFrequencyShader: SimpleFrequencyShader
    };

    return Visualizer;

  })();

}).call(this);

//# sourceMappingURL=Visualizer.js.map
