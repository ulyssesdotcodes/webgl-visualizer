// Generated by CoffeeScript 1.8.0
(function() {
  window.Visualizer = (function() {
    Visualizer.prototype.keys = {
      PAUSE: 32,
      SCALE_DANCE: 83,
      POSITION_DANCE: 68,
      SHADER: 49,
      COLOR: 50,
      SPHERE: 51,
      CUBE: 52
    };

    function Visualizer(scene, camera) {
      this.scene = scene;
      this.dancers = new Array();
      this.shaderLoader = new ShaderLoader();
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      this.audioContext = new AudioContext();
      this.audioWindow = new AudioWindow(2048, 1);
      this.loadedAudio = new Array();
      this.analyser = this.audioContext.createAnalyser();
      this.analyser.fftSize = 2048;
      this.startOffset = 0;
      this.play('audio/OnMyMind.mp3');
      this.receiveChoreography({
        id: 0,
        dancer: {
          type: 'CubeDancer'
        },
        dance: {
          type: 'PositionDance',
          params: {
            smoothingFactor: 0.5,
            direction: [0, 4.0, 0]
          }
        },
        danceMaterial: {
          type: 'ColorDanceMaterial',
          params: {
            smoothingFactor: 0.5
          }
        }
      });
    }

    Visualizer.prototype.render = function() {
      var dancer, _i, _len, _ref, _results;
      if (!this.playing) {
        return;
      }
      this.audioWindow.update(this.analyser);
      _ref = this.dancers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dancer = _ref[_i];
        _results.push(dancer.update(this.audioWindow));
      }
      return _results;
    };

    Visualizer.prototype.pause = function() {
      this.source.stop();
      this.playing = false;
      return this.startOffset += this.audioContext.currentTime - this.startTime;
    };

    Visualizer.prototype.onKeyDown = function(event) {
      switch (event.keyCode) {
        case this.keys.PAUSE:
          if (this.playing) {
            return this.pause();
          } else {
            return this.play(this.currentlyPlaying);
          }
          break;
        case this.keys.SCALE_DANCE:
          return this.receiveChoreography({
            id: 0,
            dance: {
              type: 'ScaleDance',
              params: {
                smoothingFactor: 0.5
              }
            }
          });
        case this.keys.POSITION_DANCE:
          return this.receiveChoreography({
            id: 0,
            dance: {
              type: 'PositionDance',
              params: {
                smoothingFactor: 0.2,
                direction: [0, 2.0, 0]
              }
            }
          });
        case this.keys.COLOR:
          return this.receiveChoreography({
            id: 0,
            danceMaterial: {
              type: 'ColorDanceMaterial',
              params: {
                smoothingFactor: 0.5
              }
            }
          });
        case this.keys.SHADER:
          return this.receiveChoreography({
            id: 0,
            danceMaterial: {
              type: 'SimpleFrequencyShader'
            }
          });
        case this.keys.SPHERE:
          return this.receiveChoreography({
            id: 0,
            dancer: {
              type: 'SphereDancer'
            }
          });
        case this.keys.CUBE:
          return this.receiveChoreography({
            id: 0,
            dancer: {
              type: 'CubeDancer'
            }
          });
      }
    };

    Visualizer.prototype.receiveChoreography = function(_arg) {
      var addDancer, currentDancer, dance, danceMaterial, dancer, id, newDance, newMaterial;
      id = _arg.id, dancer = _arg.dancer, dance = _arg.dance, danceMaterial = _arg.danceMaterial;
      if (this.dancers[id] != null) {
        currentDancer = this.dancers[id];
        if (dance != null) {
          if ((dancer == null) && (danceMaterial == null)) {
            currentDancer.reset();
            currentDancer.dance = new this.named_classes[dance.type](dance.params);
            return;
          } else {
            newDance = new this.named_classes[dance.type](dance.params);
          }
        } else {
          newDance = currentDancer.dance;
        }
        addDancer = (function(_this) {
          return function(newDance, newMaterial) {
            var newDancer;
            if (dancer != null) {
              newDancer = new _this.named_classes[dancer.type](newDance, newMaterial, dancer.params);
            } else {
              newDancer = new currentDancer.constructor(newDance, newMaterial);
            }
            currentDancer.reset();
            _this.scene.remove(currentDancer.body);
            _this.dancers[id] = newDancer;
            return _this.scene.add(newDancer.body);
          };
        })(this);
        if (danceMaterial != null) {
          if (danceMaterial.type.indexOf('Shader') > -1) {
            newMaterial = new this.named_classes[danceMaterial.type](this.shaderLoader);
            newMaterial.loadShader(this.audioWindow, (function(_this) {
              return function(shaderMaterial) {
                return addDancer(newDance, shaderMaterial);
              };
            })(this));
            return;
          }
          newMaterial = new this.named_classes[danceMaterial.type](danceMaterial.params);
        } else {
          newMaterial = currentDancer.danceMaterial;
        }
        addDancer(newDance, newMaterial);
      } else if (id != null) {
        this.dancers[id] = new this.named_classes[dancer.type](new this.named_classes[dance.type](dance.params), new this.named_classes[danceMaterial.type](danceMaterial.params), dancer.params);
        this.scene.add(this.dancers[id].body);
      } else {

      }
    };

    Visualizer.prototype.createLiveInput = function() {
      var gotStream;
      gotStream = (function(_this) {
        return function(stream) {
          _this.playing = true;
          _this.source = _this.audioContext.createMediaStreamSource(stream);
          return _this.source.connect(_this.analyser);
        };
      })(this);
      this.dbSampleBuf = new Uint8Array(2048);
      if (navigator.getUserMedia) {
        return navigator.getUserMedia({
          audio: true
        }, gotStream, function(err) {
          return console.log(err);
        });
      } else if (navigator.webkitGetUserMedia) {
        return navigator.webkitGetUserMedia({
          audio: true
        }, gotStream, function(err) {
          return console.log(err);
        });
      } else if (navigator.mozGetUserMedia) {
        return navigator.mozGetUserMedia({
          audio: true
        }, gotStream, function(err) {
          return console.log(err);
        });
      } else {
        return alert("Error: getUserMedia not supported!");
      }
    };

    Visualizer.prototype.play = function(url) {
      var request;
      this.currentlyPlaying = url;
      if (this.loadedAudio[url] != null) {
        this.loadFromBuffer(this.loadedAudio[url]);
        return;
      }
      request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.responseType = 'arraybuffer';
      request.onload = (function(_this) {
        return function() {
          _this.audioContext.decodeAudioData(request.response, function(buffer) {
            _this.loadedAudio[url] = buffer;
            return _this.loadFromBuffer(buffer);
          }, function(err) {
            return console.log(err);
          });
        };
      })(this);
      request.send();
    };

    Visualizer.prototype.removeLastDancer = function() {
      var prevDancer;
      prevDancer = this.dancers.pop();
      this.scene.remove(prevDancer.body);
      return prevDancer.dance;
    };

    Visualizer.prototype.loadFromBuffer = function(buffer) {
      this.startTime = this.audioContext.currentTime;
      this.source = this.audioContext.createBufferSource();
      this.source.buffer = buffer;
      this.source.connect(this.analyser);
      this.source.connect(this.audioContext.destination);
      this.playing = true;
      return this.source.start(0, this.startOffset);
    };

    Visualizer.prototype.named_classes = {
      CubeDancer: CubeDancer,
      SphereDancer: SphereDancer,
      ScaleDance: ScaleDance,
      PositionDance: PositionDance,
      ColorDanceMaterial: ColorDanceMaterial,
      SimpleFrequencyShader: SimpleFrequencyShader
    };

    return Visualizer;

  })();

}).call(this);
