// Generated by CoffeeScript 1.8.0
(function() {
  window.Visualizer = (function() {
    Visualizer.prototype.keys = {
      PAUSE: 32,
      NEXT: 78
    };

    function Visualizer(scene, camera) {
      this.viewer = new VisualizerViewer(scene, camera);
      this.choreographyRoutine = new ChoreographyRoutine(this.viewer);
      this.setupGUI();
      this.choreographyRoutine.playNext();
    }

    Visualizer.prototype.setupGUI = function() {
      var danceController, danceFolder, danceMaterialController, danceMaterialFolder, dancerController, dancerFolder, gui, idController, updateDanceFolder, updateDanceMaterialFolder, updateDancerFolder;
      gui = new dat.GUI();
      gui.add(this.viewer.audioWindow, 'responsiveness', 0.0, 5.0);
      idController = gui.add(this.choreographyRoutine, 'id');
      dancerController = gui.add(this.choreographyRoutine, 'dancer', Object.keys(Visualizer.dancerTypes));
      dancerFolder = gui.addFolder('Dancer parameters');
      dancerFolder.open();
      updateDancerFolder = (function(_this) {
        return function(value, obj) {
          var param, _i, _len, _ref, _ref1, _results;
          if (Visualizer.dancerTypes[value] == null) {
            return;
          }
          while (dancerFolder.__controllers[0] != null) {
            dancerFolder.remove(dancerFolder.__controllers[0]);
          }
          _ref = Visualizer.dancerTypes[value].params;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            param = _ref[_i];
            _this.choreographyRoutine.dancerParams[param.name] = (obj != null ? (_ref1 = obj.options) != null ? _ref1[param.name] : void 0 : void 0) ? obj.options[param.name] : param["default"];
            _results.push(dancerFolder.add(_this.choreographyRoutine.dancerParams, param.name));
          }
          return _results;
        };
      })(this);
      dancerController.onFinishChange(updateDancerFolder);
      danceController = gui.add(this.choreographyRoutine, 'dance', Object.keys(Visualizer.danceTypes));
      danceFolder = gui.addFolder('Dance parameters');
      danceFolder.open();
      updateDanceFolder = (function(_this) {
        return function(value, obj) {
          var param, _i, _len, _ref, _ref1, _results;
          if (Visualizer.danceTypes[value] == null) {
            return;
          }
          while (danceFolder.__controllers[0] != null) {
            danceFolder.remove(danceFolder.__controllers[0]);
          }
          _ref = Visualizer.danceTypes[value].params;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            param = _ref[_i];
            _this.choreographyRoutine.danceParams[param.name] = (obj != null ? (_ref1 = obj.options) != null ? _ref1[param.name] : void 0 : void 0) ? obj.options[param.name] : param["default"];
            _results.push(danceFolder.add(_this.choreographyRoutine.danceParams, param.name));
          }
          return _results;
        };
      })(this);
      danceController.onChange(updateDanceFolder);
      danceMaterialController = gui.add(this.choreographyRoutine, 'danceMaterial', Object.keys(Visualizer.danceMaterialTypes));
      danceMaterialFolder = gui.addFolder('Dance material parameters');
      danceMaterialFolder.open();
      updateDanceMaterialFolder = (function(_this) {
        return function(value, obj) {
          var param, _i, _len, _ref, _ref1, _results;
          if (_this.danceMaterialTypes[value] == null) {
            return;
          }
          while (danceMaterialFolder.__controllers[0] != null) {
            danceMaterialFolder.remove(danceMaterialFolder.__controllers[0]);
          }
          _ref = Visualizer.danceMaterialTypes[value].params;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            param = _ref[_i];
            _this.choreographyRoutine.danceMaterialParams[param.name] = (obj != null ? (_ref1 = obj.options) != null ? _ref1[param.name] : void 0 : void 0) ? obj.options[param.name] : param["default"];
            _results.push(danceMaterialFolder.add(_this.choreographyRoutine.danceMaterialParams, param.name));
          }
          return _results;
        };
      })(this);
      danceMaterialController.onChange(updateDanceMaterialFolder);
      idController.onChange((function(_this) {
        return function(value) {
          var controller, idDancer, _i, _len, _ref;
          idDancer = _this.viewer.getDancer(value);
          if (idDancer != null) {
            _this.choreographyRoutine.updateDancer(idDancer);
            _ref = gui.__controllers;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              controller = _ref[_i];
              controller.updateDisplay();
            }
            updateDancerFolder(_this.choreographyRoutine.dancer, idDancer);
            updateDanceMaterialFolder(_this.choreographyRoutine.danceMaterial, idDancer.danceMaterial);
            return updateDanceFolder(_this.choreographyRoutine.dance, idDancer.dance);
          }
        };
      })(this));
      gui.add(this.choreographyRoutine, 'preview');
      gui.add(this.choreographyRoutine, 'add');
      gui.add(this.choreographyRoutine, 'insertBeat');
      gui.add(this.choreographyRoutine, 'playNext');
      return gui.add(this.choreographyRoutine, 'reset');
    };

    Visualizer.prototype.onKeyDown = function(event) {
      switch (event.keyCode) {
        case this.keys.PAUSE:
          if (this.viewer.playing) {
            return this.viewer.pause();
          } else {
            return this.viewer.play(this.viewer.currentlyPlaying);
          }
          break;
        case this.keys.NEXT:
          return this.choreographyRoutine.playNext();
      }
    };

    Visualizer.dancerTypes = {
      CubeDancer: CubeDancer,
      SphereDancer: SphereDancer,
      PointCloudDancer: PointCloudDancer
    };

    Visualizer.danceTypes = {
      ScaleDance: ScaleDance,
      PositionDance: PositionDance,
      RotateDance: RotateDance
    };

    Visualizer.danceMaterialTypes = {
      ColorDanceMaterial: ColorDanceMaterial,
      SimpleFrequencyShader: SimpleFrequencyShader
    };

    return Visualizer;

  })();

}).call(this);
