// Generated by CoffeeScript 1.8.0
(function() {
  window.DatGUIInterface = (function() {
    function DatGUIInterface() {
      this.routineWindow = $('#routine');
    }

    DatGUIInterface.prototype.setup = function(player, choreographyRoutine, viewer) {
      var danceController, danceFolder, danceMaterialController, danceMaterialFolder, dancerController, dancerFolder, gui, idController, setupFolder, updateFolder, _ref, _ref1, _ref2;
      this.player = player;
      this.choreographyRoutine = choreographyRoutine;
      this.viewer = viewer;
      gui = new dat.GUI();
      gui.add(this.player.audioWindow, 'responsiveness', 0.0, 5.0);
      idController = gui.add(this.choreographyRoutine, 'id');
      setupFolder = (function(_this) {
        return function(name, varName, keys) {
          var controller, folder;
          controller = gui.add(_this.choreographyRoutine, varName, keys);
          folder = gui.addFolder(name);
          folder.open();
          return [controller, folder];
        };
      })(this);
      updateFolder = function(types, folder, params, value, obj) {
        var param, _i, _len, _ref, _ref1, _results;
        if (types[value] == null) {
          return;
        }
        while (folder.__controllers[0] != null) {
          folder.remove(folder.__controllers[0]);
        }
        _ref = types[value].params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          params[param.name] = (obj != null ? (_ref1 = obj.options) != null ? _ref1[param.name] : void 0 : void 0) ? obj.options[param.name] : param["default"];
          _results.push(folder.add(params, param.name));
        }
        return _results;
      };
      _ref = setupFolder('Dancer parameters', 'dancer', Object.keys(Visualizer.dancerTypes)), dancerController = _ref[0], dancerFolder = _ref[1];
      dancerController.onChange((function(_this) {
        return function(value, obj) {
          return updateFolder(Visualizer.dancerTypes, dancerFolder, _this.choreographyRoutine.dancerParams, value, obj);
        };
      })(this));
      _ref1 = setupFolder('Dance parameters', 'dance', Object.keys(Visualizer.danceTypes)), danceController = _ref1[0], danceFolder = _ref1[1];
      danceController.onChange((function(_this) {
        return function(value, obj) {
          return updateFolder(Visualizer.danceTypes, danceFolder, _this.choreographyRoutine.danceParams, value, obj);
        };
      })(this));
      _ref2 = setupFolder('Dance material paramaters', 'danceMaterial', Object.keys(Visualizer.danceMaterialTypes)), danceMaterialController = _ref2[0], danceMaterialFolder = _ref2[1];
      danceMaterialController.onChange((function(_this) {
        return function(value, obj) {
          return updateFolder(Visualizer.danceMaterialTypes, danceMaterialFolder, _this.choreographyRoutine.danceMaterialParams, value, obj);
        };
      })(this));
      idController.onChange((function(_this) {
        return function(value) {
          var controller, idDancer, _i, _len, _ref3;
          idDancer = _this.viewer.getDancer(value);
          if (idDancer != null) {
            _this.choreographyRoutine.updateDancer(idDancer);
            _ref3 = gui.__controllers;
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              controller = _ref3[_i];
              controller.updateDisplay();
            }
            updateDancerFolder(_this.choreographyRoutine.dancer, idDancer);
            updateDanceMaterialFolder(_this.choreographyRoutine.danceMaterial, idDancer.danceMaterial);
            return updateDanceFolder(_this.choreographyRoutine.dance, idDancer.dance);
          }
        };
      })(this));
      gui.add(this.choreographyRoutine, 'preview');
      gui.add(this.choreographyRoutine, 'add');
      gui.add(this.choreographyRoutine, 'insertBeat');
      gui.add(this.choreographyRoutine, 'playNext');
      gui.add(this.choreographyRoutine, 'reset');
      return this.setupPopup();
    };

    DatGUIInterface.prototype.setupPopup = function() {
      return $('#viewerButton').click((function(_this) {
        return function(e) {
          var popupURL, sendBeats;
          e.preventDefault();
          _this.domain = window.location.protocol + '//' + window.location.host;
          popupURL = _this.domain + location.pathname + 'viewer.html';
          _this.popup = window.open(popupURL, 'myWindow');
          sendBeats = function() {
            var routineBeat, _results;
            routineBeat = _this.choreographyRoutine.routineBeat;
            _this.choreographyRoutine.routineBeat = -1;
            _results = [];
            while (_this.choreographyRoutine.routineBeat < routineBeat) {
              _results.push(_this.choreographyRoutine.playNext());
            }
            return _results;
          };
          return setTimeout(sendBeats, 100);
        };
      })(this));
    };

    DatGUIInterface.prototype.updateText = function(json) {
      return this.routineWindow.html(JSON.stringify(json, void 0, 2));
    };

    return DatGUIInterface;

  })();

}).call(this);

//# sourceMappingURL=DatGUIInterface.js.map
